{"version":3,"sources":["profile_pic.png","components/Header.js","components/WorkExperience.js","components/Degrees.js","components/Profile.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","toggle","bind","state","isOpen","this","setState","Navbar","color","dark","expand","Container","NavbarBrand","href","src","profilePic","className","alt","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","React","Component","getDuration","duration","years","parseInt","months","WorkExperience","Row","Col","profile","experiences","map","experience","i","moment","locale","totalDuration","roles","reduce","cnt","role","startDate","timeEnd","currentJob","Date","endDate","diff","Number","asMonths","toPrecision","key","Media","body","heading","url","companyName","title","format","location","description","Degrees","studies","study","institute","graduationYear","durationInYears","object","value","Profile","activeTab","tab","Jumbotron","summary","tabs","classnames","active","TabContent","TabPane","tabId","Footer","icon","faLinkedin","faGithub","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4kEAAAA,EAAOC,QAAU,IAA0B,yC,+RC0C5BC,E,kDArCX,WAAYC,GAAQ,IAAD,8BAChB,cAAMA,IAEDC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,MAAQ,CACTC,QAAQ,GALI,E,qDAUfC,KAAKC,SAAS,CACVF,QAASC,KAAKF,MAAMC,W,+BAKxB,OACI,kBAACG,EAAA,EAAD,CAAQC,MAAM,OAAOC,MAAI,EAACC,OAAO,MAC7B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAaC,KAAK,KACd,yBAAKC,IAAKC,IAAYC,UAAU,cAAcC,IAAI,qBAClD,mDAEJ,kBAACC,EAAA,EAAD,CAAeC,QAASd,KAAKJ,SAC7B,kBAACmB,EAAA,EAAD,CAAUhB,OAAQC,KAAKF,MAAMC,OAAQiB,QAAM,GACvC,kBAACC,EAAA,EAAD,CAAKN,UAAU,UAAUK,QAAM,GAC3B,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASX,KAAK,aAAd,oB,GA5BXY,IAAMC,W,yFCE3B,SAASC,EAAYC,GACjB,IAAMC,EAAQC,SAASF,EAAS,GAC1BG,EAAUH,EAAW,GAAKA,EAAW,GAAKA,EAChD,OAAQC,EAAQ,EAAGA,EAAQ,SAAWA,EAAQ,EAAG,IAAK,IAAM,QAAU,KAAOE,EAAS,EAAGA,EAAS,UAAYA,EAAS,EAAG,IAAK,IAAM,I,IAiD1HC,E,uKA5CP,OAAO,kBAACrB,EAAA,EAAD,KACH,kBAACsB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACKC,EAAQC,YAAYC,KAAI,SAAUC,EAAYC,GAC3CC,IAAOC,OAAO,MACd,IAAMC,EAAgBJ,EAAWK,MAAMC,QAAO,SAAUC,EAAKC,GACzD,IAAMC,EAAYP,IAAOM,EAAKC,WACxBC,EAAUR,IAAOM,EAAKG,WAAa,IAAIC,KAAS,IAAIA,KAAKJ,EAAKK,UAC9DvB,EAAWY,IAAOZ,SAASoB,EAAQI,KAAKL,IAC9C,OAAOM,OAAOR,GAAOQ,OAAOzB,EAAS0B,WAAWC,YAAY,MAC3D,GACL,OACA,yBAAKC,IAAKjB,GACN,kBAACkB,EAAA,EAAD,KACA,kBAACA,EAAA,EAAD,CAAOC,MAAI,GACP,kBAACD,EAAA,EAAD,CAAOE,SAAO,GACd,uBAAG9C,KAAMyB,EAAWsB,KAAMtB,EAAWuB,aACrC,0BAAM7C,UAAU,oBAAoBW,EAAYe,KAG/CJ,EAAWK,MAAMN,KAAI,SAAUS,EAAMP,GACtC,IAAMQ,EAAYP,IAAOM,EAAKC,WACxBC,EAAUR,IAAOM,EAAKG,WAAa,IAAIC,KAAS,IAAIA,KAAKJ,EAAKK,UAC9DvB,EAAWyB,OAAOb,IAAOZ,SAASoB,EAAQI,KAAKL,IAAYO,WAAWC,YAAY,IAExF,OAAO,yBAAKC,IAAKjB,GACb,4BAAKO,EAAKgB,OACV,0BACA9C,UAAU,eAAe+B,EAAUgB,OAAO,YAD1C,MAC0DjB,EAAKG,WAAa,UAAYD,EAAQe,OAAO,YADvG,KACsHpC,EAAYC,GADlI,KAEA,0BAAMZ,UAAU,eAAe8B,EAAKkB,UACpC,uBAAGhD,UAAU,kBAAkB8B,EAAKmB,8B,GAhC3CxC,IAAMC,WCuEpBwC,E,uKA5EX,OAAO,kBAACvD,EAAA,EAAD,KACL,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGC,EAAQgC,QAAQ9B,KAAI,SAAU+B,EAAO7B,GACpC,OAAO,kBAACkB,EAAA,EAAD,CAAOD,IAAKjB,GACjB,kBAACkB,EAAA,EAAD,CAAOC,MAAI,GACT,kBAACD,EAAA,EAAD,CAAOE,SAAO,GACZ,uBAAG9C,KAAMuD,EAAMR,KAAMQ,EAAMC,YAG3B,CACE,CACE,IAAO,QACP,MAASD,EAAMN,OAEjB,CACE,IAAO,kBACP,MAASM,EAAME,gBAEjB,CACE,IAAO,WACP,MAASF,EAAMG,gBAAkB,aAEnClC,KAAI,SAAUmC,EAAQjC,GACtB,OAAO,6BACL,kBAACN,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKlB,UAAU,aAAawD,EAAOhB,IAAnC,MAEF,kBAACvB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAMsC,EAAOC,mBAU/B,6BACA,kC,GA1CgBhD,IAAMC,WCyDbgD,E,kDAtDb,WAAY1E,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,MAAQ,CACXwE,UAAW,KALI,E,mDASZC,GACDvE,KAAKF,MAAMwE,YAAcC,GAC3BvE,KAAKC,SAAS,CACZqE,UAAWC,M,+BAKP,IAAD,OACP,OAAO,6BACL,kBAACC,EAAA,EAAD,KACE,kBAAClE,EAAA,EAAD,KACE,wBAAIK,UAAU,aAAamB,EAAQ2B,OACnC,uBAAG9C,UAAU,QAAQmB,EAAQ2C,WAIjC,kBAACnE,EAAA,EAAD,KACE,kBAACW,EAAA,EAAD,CAAKyD,MAAI,GACP,kBAACxD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,UAAWgE,IAAW,CAAEC,OAAiC,MAAzB5E,KAAKF,MAAMwE,YAC3CxD,QAAS,WAAQ,EAAKlB,OAAO,OADtC,eAKF,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,UAAWgE,IAAW,CAAEC,OAAiC,MAAzB5E,KAAKF,MAAMwE,YAC3CxD,QAAS,WAAQ,EAAKlB,OAAO,OADtC,eAMJ,kBAACiF,EAAA,EAAD,CAAYP,UAAWtE,KAAKF,MAAMwE,WAChC,kBAACQ,EAAA,EAAD,CAASC,MAAM,KACb,kBAAC,EAAD,OAEF,kBAACD,EAAA,EAAD,CAASC,MAAM,KACb,kBAAC,EAAD,c,GA/CU3D,IAAMC,W,gBCYb2D,E,uKAZP,OACI,gCACI,6BACA,kBAAC1E,EAAA,EAAD,KACI,uBAAGE,KAAK,8DAA6D,kBAAC,IAAD,CAAiByE,KAAMC,OAC5F,uBAAG1E,KAAK,kCAAiC,kBAAC,IAAD,CAAiByE,KAAME,a,GAP/D/D,IAAMC,WCaZ+D,E,uKAVX,OACE,yBAAKzE,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUU,aCMEgE,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cb8572c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile_pic.cc078057.png\";","import React from 'react';\nimport {Container, Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavLink, NavItem } from 'reactstrap';\nimport profilePic from '../profile_pic.png'\n\nclass Header extends React.Component {\n    constructor(props) {\n       super(props);\n       \n       this.toggle = this.toggle.bind(this);\n       this.state = {\n           isOpen: false\n       };\n    }\n    \n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return (\n            <Navbar color=\"dark\" dark expand=\"md\">\n                <Container>\n                    <NavbarBrand href=\"/\">\n                        <img src={profilePic} className=\"profile-pic\" alt=\"Satyajeet Desale\"/>\n                        <span>Satyajeet Desale</span>\n                    </NavbarBrand>\n                    <NavbarToggler onClick={this.toggle}/>\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className=\"ml-auto\" navbar>\n                            <NavItem>\n                                <NavLink href=\"/profile/\">Profile</NavLink>\n                            </NavItem>\n                        </Nav>\n                    </Collapse>\n                </Container>\n            </Navbar>        \n        );\n    }\n}\n\nexport default Header;\n","import React from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport profile from \"../profile.json\";\nimport moment from \"moment\";\nimport { Media } from \"reactstrap\";\n\nfunction getDuration(duration) {\n    const years = parseInt(duration/2);\n    const months = (duration > 12)? duration % 12 : duration\n    return (years > 0? years + \" year\" + (years > 1? \"s\": \"\") + \" and \" : \"\") + (months > 0? months + \" month\" + (months > 1? \"s\": \"\") : \"\");\n}\n\nclass WorkExperience extends React.Component {\n    render() {\n        return <Container>\n            <Row>\n                <Col>\n                    {profile.experiences.map(function (experience, i) {\n                        moment.locale('en');\n                        const totalDuration = experience.roles.reduce(function (cnt, role) {\n                            const startDate = moment(role.startDate);\n                            const timeEnd = moment(role.currentJob ? new Date() : new Date(role.endDate));\n                            const duration = moment.duration(timeEnd.diff(startDate));\n                            return Number(cnt) + Number(duration.asMonths().toPrecision(1));\n                          }, 0);\n                        return (\n                        <div key={i}>\n                            <Media>\n                            <Media body>\n                                <Media heading>\n                                <a href={experience.url}>{experience.companyName}</a>\n                                <span className=\"jobTotalDuration\">{getDuration(totalDuration)}</span>\n                                </Media>\n            \n                                {experience.roles.map(function (role, i) {\n                                const startDate = moment(role.startDate);\n                                const timeEnd = moment(role.currentJob ? new Date() : new Date(role.endDate));\n                                const duration = Number(moment.duration(timeEnd.diff(startDate)).asMonths().toPrecision(1));\n            \n                                return <div key={i}>\n                                    <h5>{role.title}</h5>\n                                    <span\n                                    className=\"jobDuration\">{startDate.format('MMM YYYY')} - {role.currentJob ? 'Present' : timeEnd.format('MMM YYYY')} ({getDuration(duration)})</span>\n                                    <span className=\"jobLocation\">{role.location}</span>\n                                    <p className=\"jobDescription\">{role.description}</p>\n                                </div>\n                                })}\n                            </Media>\n                            </Media>\n                        </div>\n                        );    \n                    })}\n                </Col>\n            </Row>\n        </Container>\n    }\n}\n\nexport default WorkExperience;\n","import React from 'react';\nimport {Container, Row, Col, Media} from 'reactstrap';\nimport moment from 'moment';\nimport profile from '../profile.json';\n\nclass Degrees extends React.Component {\n  render() {\n    return <Container>\n      <Row>\n        <Col>\n          {profile.studies.map(function (study, i) {\n            return <Media key={i}>\n              <Media body>\n                <Media heading>\n                  <a href={study.url}>{study.institute}</a>\n                </Media>\n                {\n                  [\n                    {\n                      \"key\": \"Title\",\n                      \"value\": study.title\n                    },\n                    {\n                      \"key\": \"Graduation Year\",\n                      \"value\": study.graduationYear\n                    },\n                    {\n                      \"key\": \"Duration\",\n                      \"value\": study.durationInYears + \" year(s)\"\n                    }\n                  ].map(function (object, i) {\n                    return <div>\n                      <Row>\n                        <Col className=\"formLabel\">{object.key}:</Col>\n                      </Row>\n                      <Row>\n                        <Col>{object.value}</Col>\n                      </Row>\n                    </div>\n                  })\n                }\n              </Media>\n            </Media>\n          })}\n        </Col>\n      </Row>\n      <br/>\n      <br/>\n      {/* <Row>\n        <Col>\n          <h4>Certifications:</h4>\n          <hr/>\n          {profile.certifications.map(function (certification, i) {\n            const verification = certification.verificationLink ?\n              <Row>\n                <Col>\n                  <a className=\"certificateLink\" href={certification.verificationLink}>See certificate</a>\n                </Col>\n              </Row> : \"\";\n            return <Media key={i}>\n              <Media left top href={certification.url}>\n                <Media object src={certification.logo} alt={certification.title}/>\n              </Media>\n              <Media body>\n                <Media heading>\n                  <a href={certification.url}>{certification.title}</a>\n                </Media>\n                <Row>\n                  <Col>{moment(certification.issueDate).format('MMM YYYY')} - {(certification.expiryDate) ? moment(certification.expiryDate).format('MMM YYYY') : 'Present'}</Col>\n                </Row>\n                <Row>\n                  <Col>{certification.issuer}</Col>\n                </Row>\n                {verification}\n              </Media>\n            </Media>\n          })}\n        </Col>\n      </Row> */}\n    </Container>\n  }\n}\n\nexport default Degrees;","import React from 'react';\nimport {Jumbotron, Container, TabContent, TabPane, Nav, NavItem, NavLink } from \"reactstrap\";\nimport classnames from 'classnames';\nimport WorkExperience from \"./WorkExperience\";\nimport Degrees from './Degrees'\nimport profile from '../profile.json'\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      activeTab: '1'\n    };\n  }\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      });\n    }\n  }\n\n  render() {\n    return <div>\n      <Jumbotron>\n        <Container>\n          <h1 className=\"display-3\">{profile.title}</h1>\n          <p className=\"lead\">{profile.summary}</p>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <Nav tabs>\n          <NavItem>\n            <NavLink className={classnames({ active: this.state.activeTab === '1' })}\n                     onClick={() => { this.toggle('1'); }}>\n              Experience\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink className={classnames({ active: this.state.activeTab === '2' })}\n                     onClick={() => { this.toggle('2'); }}>\n              Education\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent activeTab={this.state.activeTab}>\n          <TabPane tabId=\"1\">\n            <WorkExperience/>\n          </TabPane>\n          <TabPane tabId=\"2\">\n            <Degrees/>\n          </TabPane>\n        </TabContent>\n      </Container>\n    </div>;\n  }\n}\n\nexport default Profile;","import React from 'react';\nimport {Container} from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLinkedin, faGithub } from '@fortawesome/free-brands-svg-icons';\n\nclass Footer extends React.Component {\n    render() {\n        return (\n            <footer>\n                <hr/>\n                <Container>\n                    <a href=\"https://www.linkedin.com/public-profile/in/satyajeetdesale\"><FontAwesomeIcon icon={faLinkedin}/></a>\n                    <a href=\"https://github.com/satyajeetnd\"><FontAwesomeIcon icon={faGithub}/></a>\n                </Container>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Profile from './components/Profile';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Profile/>\n        <Footer/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}